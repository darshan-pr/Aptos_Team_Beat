"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { projectStore, type Project, type EscrowDonation } from "@/lib/projectStore";
import { 
  DollarSign, 
  Users, 
  Calendar,
  Download,
  Eye,
  CheckCircle,
  Clock,
  AlertTriangle,
  Lock,
  Unlock
} from "lucide-react";

export function TrackFunds() {
  const [selectedProject, setSelectedProject] = useState<string>("");
  const [projects, setProjects] = useState<Project[]>([]);
  const [showDonorDetails, setShowDonorDetails] = useState(false);

  useEffect(() => {
    const allProjects = projectStore.getAllProjects();
    setProjects(allProjects);
    if (allProjects.length > 0 && !selectedProject) {
      setSelectedProject(allProjects[0].id);
    }
  }, [selectedProject]);

  const currentProject = projects.find(p => p.id === selectedProject);

  const getEscrowSummary = () => {
    if (!currentProject) return { totalEscrow: 0, totalReleased: 0, milestoneData: [] };

    let totalEscrow = 0;
    let totalReleased = 0;
    
    const milestoneData = currentProject.milestones.map(milestone => {
      const escrowTotal = projectStore.getTotalEscrowForMilestone(currentProject.id, milestone.id);
      const released = milestone.escrowReleased ? escrowTotal : 0;
      
      totalEscrow += escrowTotal;
      totalReleased += released;

      return {
        milestone,
        escrowTotal,
        released,
        pending: escrowTotal - released
      };
    });

    return { totalEscrow, totalReleased, milestoneData };
  };

  const getStatusColor = (milestone: any) => {
    if (milestone.escrowReleased) return "text-green-600 bg-green-100";
    if (milestone.isCompleted && milestone.verificationStatus === 'verified') return "text-blue-600 bg-blue-100";
    if (milestone.isCompleted) return "text-yellow-600 bg-yellow-100";
    return "text-gray-600 bg-gray-100";
  };

  const getStatusIcon = (milestone: any) => {
    if (milestone.escrowReleased) return <Unlock className="h-4 w-4" />;
    if (milestone.isCompleted) return <Clock className="h-4 w-4" />;
    return <Lock className="h-4 w-4" />;
  };

  const getStatusText = (milestone: any) => {
    if (milestone.escrowReleased) return "Released";
    if (milestone.isCompleted && milestone.verificationStatus === 'verified') return "Verified - Ready for Release";
    if (milestone.isCompleted) return "Awaiting Verification";
    return "Locked in Escrow";
  };

  const exportReport = () => {
    const stats = projectStore.getProjectStats();
    console.log("Exporting financial report...", stats);
  };

  if (!currentProject) return <div>Loading...</div>;

  const { totalEscrow, totalReleased, milestoneData } = getEscrowSummary();

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-6 w-6 text-blue-600" />
              Track Funds - Escrow System
            </CardTitle>
            <Button variant="outline" onClick={exportReport}>
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {/* Project Selection */}
          <div className="mb-6">
            <Label htmlFor="project-select">Select Project</Label>
            <select
              id="project-select"
              value={selectedProject}
              onChange={(e) => setSelectedProject(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {projects.map((project) => (
                <option key={project.id} value={project.id}>
                  {project.title}
                </option>
              ))}
            </select>
          </div>

          {/* Financial Overview */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">
                  ${currentProject.targetAmount.toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Target Amount</div>
                <div className="text-xs text-gray-500 mt-1">
                  Total funding goal
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">
                  ${totalEscrow.toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Total in Escrow</div>
                <div className="text-xs text-gray-500 mt-1">
                  Donations held securely
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">
                  ${totalReleased.toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Funds Released</div>
                <div className="text-xs text-gray-500 mt-1">
                  {totalEscrow > 0 ? Math.round((totalReleased / totalEscrow) * 100) : 0}% of escrow
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">
                  ${(totalEscrow - totalReleased).toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Pending Release</div>
                <div className="text-xs text-gray-500 mt-1">
                  Awaiting verification
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Progress Bar */}
          <div className="mb-6">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>Funding Progress</span>
              <span>{Math.round((totalEscrow / currentProject.targetAmount) * 100)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                style={{ width: `${Math.min(100, (totalEscrow / currentProject.targetAmount) * 100)}%` }}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Donor Information */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-6 w-6 text-blue-600" />
              Track Funds
            </CardTitle>
            <Button variant="outline" onClick={exportReport}>
              <Download className="h-4 w-4 mr-2" />
              Export Report
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {/* Project Selection */}
          <div className="mb-6">
            <Label htmlFor="project-select">Select Project</Label>
            <select
              id="project-select"
              value={selectedProject}
              onChange={(e) => setSelectedProject(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {projects.map((project) => (
                <option key={project.id} value={project.id}>
                  {project.title}
                </option>
              ))}
            </select>
          </div>

          {/* Financial Overview */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">
                  ${currentProject.totalRaised.toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Total Raised</div>
                <div className="text-xs text-gray-500 mt-1">
                  of ${currentProject.totalTarget.toLocaleString()} target
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">
                  ${currentProject.totalReleased.toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">Funds Released</div>
                <div className="text-xs text-gray-500 mt-1">
                  {Math.round((currentProject.totalReleased / currentProject.totalRaised) * 100)}% of raised
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {currentProject.donorCount}
                </div>
                <div className="text-sm text-gray-600">Total Donors</div>
                <div className="text-xs text-gray-500 mt-1">
                  Last: {new Date(currentProject.lastDonation).toLocaleDateString()}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">
                  ${(currentProject.totalRaised - currentProject.totalReleased).toLocaleString()}
                </div>
                <div className="text-sm text-gray-600">In Escrow</div>
                <div className="text-xs text-gray-500 mt-1">
                  Pending release
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Progress Bar */}
          <div className="mb-6">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>Funding Progress</span>
              <span>{Math.round((currentProject.totalRaised / currentProject.totalTarget) * 100)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                style={{ width: `${(currentProject.totalRaised / currentProject.totalTarget) * 100}%` }}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Milestone Fund Allocations */}
      <Card>
        <CardHeader>
          <CardTitle>Fund Allocation by Milestone</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {milestoneData.map((data, index) => (
              <div key={data.milestone.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-medium text-gray-900">
                    Milestone {index + 1}: {data.milestone.title}
                  </h3>
                  <div className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(data.milestone)}`}>
                    {getStatusIcon(data.milestone)}
                    {getStatusText(data.milestone)}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Escrow Amount:</span>
                    <div className="font-medium">${data.escrowTotal.toLocaleString()}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Released Amount:</span>
                    <div className="font-medium">${data.released.toLocaleString()}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Pending Release:</span>
                    <div className="font-medium">${data.pending.toLocaleString()}</div>
                  </div>
                </div>

                {data.milestone.isCompleted && (
                  <div className="mt-3 space-y-2">
                    {data.milestone.verificationStatus === 'awaiting_verification' && (
                      <div className="p-3 bg-yellow-50 rounded-lg">
                        <p className="text-sm text-yellow-800">
                          ⏳ Milestone completed! Waiting for community verification. 
                          Funds will be released automatically once verified.
                        </p>
                      </div>
                    )}
                    {data.milestone.verificationStatus === 'verified' && !data.milestone.escrowReleased && (
                      <div className="p-3 bg-blue-50 rounded-lg">
                        <p className="text-sm text-blue-800">
                          ✅ Milestone verified! Funds are being processed for release.
                        </p>
                      </div>
                    )}
                    {data.milestone.escrowReleased && (
                      <div className="p-3 bg-green-50 rounded-lg">
                        <p className="text-sm text-green-800">
                          🎉 Funds released! ${data.milestone.fundingAmount.toLocaleString()} has been transferred to your account.
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {!data.milestone.isCompleted && data.escrowTotal > 0 && (
                  <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                    <p className="text-sm text-blue-800">
                      🔒 ${data.escrowTotal.toLocaleString()} is securely held in escrow. 
                      Complete this milestone to trigger community verification and fund release.
                    </p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* System Information */}
      <Card>
        <CardHeader>
          <CardTitle>Escrow System Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-medium text-blue-900 mb-2">How the Escrow System Works</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Donations are automatically held in secure escrow accounts</li>
                <li>• Funds are tied to specific milestones for transparency</li>
                <li>• Completion of milestones triggers community verification period</li>
                <li>• 2+ community approvals automatically release funds</li>
                <li>• All transactions are recorded on the blockchain</li>
              </ul>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h5 className="font-medium text-green-900 mb-2">Security Benefits</h5>
                <ul className="text-sm text-green-800 space-y-1">
                  <li>• Funds protected until milestones are verified</li>
                  <li>• Community oversight ensures accountability</li>
                  <li>• Automatic release prevents manual errors</li>
                </ul>
              </div>
              
              <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <h5 className="font-medium text-purple-900 mb-2">Transparency Features</h5>
                <ul className="text-sm text-purple-800 space-y-1">
                  <li>• Real-time tracking of all funds</li>
                  <li>• Public verification process</li>
                  <li>• Immutable transaction records</li>
                </ul>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}      {/* Donor Information */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              Donor Information
            </CardTitle>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowDonorDetails(!showDonorDetails)}
            >
              <Eye className="h-4 w-4 mr-2" />
              {showDonorDetails ? "Hide Details" : "Show Details"}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {showDonorDetails ? (
            <div className="space-y-4">
              {currentProject.donors.map((donor) => (
                <div key={donor.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <Users className="h-5 w-5 text-blue-600" />
                    </div>
                    <div>
                      <div className="font-medium text-gray-900">
                        {donor.isAnonymous ? "Anonymous Donor" : donor.name}
                      </div>
                      <div className="text-sm text-gray-600">
                        {donor.walletAddress.slice(0, 8)}...{donor.walletAddress.slice(-6)}
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium text-gray-900">
                      ${donor.amount.toLocaleString()}
                    </div>
                    <div className="text-sm text-gray-600 flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      {new Date(donor.date).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-600">
              <Users className="h-12 w-12 mx-auto mb-4 text-gray-400" />
              <p>Click "Show Details" to view donor information</p>
              <p className="text-sm mt-1">
                Donor privacy settings are respected according to their preferences
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Recent Transactions */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Transactions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {[
              {
                type: "donation",
                description: "Received donation from John Smith",
                amount: "+$5,000",
                date: "2024-02-20",
                hash: "0xabcd...1234"
              },
              {
                type: "release",
                description: "Milestone 1 funds released",
                amount: "-$10,000",
                date: "2024-01-15",
                hash: "0xefgh...5678"
              },
              {
                type: "donation",
                description: "Received anonymous donation",
                amount: "+$2,500",
                date: "2024-02-18",
                hash: "0xijkl...9012"
              }
            ].map((transaction, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  <div className={`w-2 h-2 rounded-full ${
                    transaction.type === "donation" ? "bg-green-500" : "bg-blue-500"
                  }`} />
                  <div>
                    <div className="font-medium text-gray-900">{transaction.description}</div>
                    <div className="text-sm text-gray-600">
                      Hash: {transaction.hash}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className={`font-medium ${
                    transaction.type === "donation" ? "text-green-600" : "text-blue-600"
                  }`}>
                    {transaction.amount}
                  </div>
                  <div className="text-sm text-gray-600">{transaction.date}</div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
